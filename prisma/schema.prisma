generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  AUTHOR
}

model User {
  id                        String          @id @default(uuid()) @db.VarChar(255)
  email                     String          @unique @db.VarChar(255)
  password                  String          @db.VarChar(255)
  name                      String          @db.VarChar(255)
  avatar                    String?         @db.VarChar(255)
  is_verified               Boolean         @default(false)
  is_email_verification     Boolean         @default(false)
  role                      Role            @default(USER)
  reset_password_token      String?         @db.VarChar(255)
  reset_password_expiration DateTime?
  created_at                DateTime        @default(now()) @db.Timestamp(0)
  updated_at                DateTime        @default(now()) @updatedAt @db.Timestamp(0)

  discussions               Discussion[]    @relation("DiscussionUserId")
  masjidsCreated            Masjid[]        @relation("MasjidCreatedBy")
  masjidsUpdated            Masjid[]        @relation("MasjidUpdatedBy")
  detailMasjidsCreated      DetailMasjid[]  @relation("DetailMasjidCreatedBy")
  detailMasjidsUpdated      DetailMasjid[]  @relation("DetailMasjidUpdatedBy")
  categoriesCreated         Category[]      @relation("CategoryCreatedBy")
  categoriesUpdated         Category[]      @relation("CategoryUpdatedBy")
  histories                 History[]       @relation("HistoryUser")

  @@map("tb_users")
}

model Discussion {
  id                        String          @id @default(uuid()) @db.VarChar(255)
  message                   String?         @db.VarChar(5000)
  created_at                DateTime        @default(now()) @db.Timestamp(0)
  updated_at                DateTime        @default(now()) @updatedAt @db.Timestamp(0)
  id_replies_discussion     String?         @db.VarChar(255)
  id_user                   String          @db.VarChar(255)
  id_detail_masjid          String          @db.VarChar(255)

  user                      User            @relation("DiscussionUserId", fields: [id_user], references: [id])
  detailMasjid              DetailMasjid    @relation("DiscussionDetailMasjid", fields: [id_detail_masjid], references: [id])
  parentDiscussion          Discussion?     @relation("Replies", fields: [id_replies_discussion], references: [id])
  replies                   Discussion[]    @relation("Replies")

  @@map("tb_discussions")
}

model Masjid {
  id                        String              @id @default(uuid()) @db.VarChar(255)
  name                      String              @db.VarChar(255)
  description               String?             @db.Text
  thumbnail                 String?             @db.Text
  totalKliks                Int                 @default(0)
  created_by                String              @db.VarChar(255)
  updated_by                String              @db.VarChar(255)
  created_at                DateTime            @default(now()) @db.Timestamp(0)
  updated_at                DateTime            @default(now()) @updatedAt @db.Timestamp(0)

  createdBy                 User                @relation("MasjidCreatedBy", fields: [created_by], references: [id], onDelete: Cascade)
  updatedBy                 User                @relation("MasjidUpdatedBy", fields: [updated_by], references: [id], onDelete: Cascade)
  categories                MasjidCategory[]    @relation("MasjidCategories")
  detailMasjids             DetailMasjid[]      @relation("MasjidDetailMasjid")

  @@map("tb_masjids")
}

model DetailMasjid {
  id                        String              @id @default(uuid()) @db.VarChar(255)
  id_masjid                 String              @db.VarChar(255)
  name                      String              @db.VarChar(255)
  address                   String              @db.Text
  totalKliks                Int                 @default(0)
  created_by                String              @db.VarChar(255)
  updated_by                String              @db.VarChar(255)
  created_at                DateTime            @default(now()) @db.Timestamp(0)
  updated_at                DateTime            @default(now()) @updatedAt @db.Timestamp(0)

  masjid                    Masjid              @relation("MasjidDetailMasjid", fields: [id_masjid], references: [id], onDelete: Cascade)
  createdBy                 User                @relation("DetailMasjidCreatedBy", fields: [created_by], references: [id])
  updatedBy                 User                @relation("DetailMasjidUpdatedBy", fields: [updated_by], references: [id])
  photos                    Photo[]             @relation("DetailMasjidPhotos")
  sejarah                   Sejarah[]           @relation("SejarahDetailMasjid")
  discussions               Discussion[]        @relation("DiscussionDetailMasjid")
  histories                 History[]           @relation("DetailMasjidHistories")

  @@map("tb_detail_masjids")
}

model Sejarah {
  id                        Int                 @id @default(autoincrement())
  title                     String              @db.VarChar(255)
  content                   String              @db.Text
  masjidId                  String              @db.VarChar(255)
  detailMasjidId            String?             @db.VarChar(255)
  created_by                String              @db.VarChar(255)
  updated_by                String              @db.VarChar(255)
  created_at                DateTime            @default(now()) @db.Timestamp(0)
  updated_at                DateTime            @default(now()) @updatedAt @db.Timestamp(0)

  detailMasjid              DetailMasjid?       @relation("SejarahDetailMasjid", fields: [detailMasjidId], references: [id])

  @@map("tb_sejarah")
}

model Photo {
  id                        String              @id @default(uuid()) @db.VarChar(255)
  photo_url                 String              @db.Text
  caption                   String?             @db.Text
  masjidId                  String?             @db.VarChar(255)
  detailMasjidId            String?             @db.VarChar(255)
  created_by                String              @db.VarChar(255)
  updated_by                String              @db.VarChar(255)
  created_at                DateTime            @default(now()) @db.Timestamp(0)
  updated_at                DateTime            @default(now()) @updatedAt @db.Timestamp(0)

  detailMasjid              DetailMasjid?       @relation("DetailMasjidPhotos", fields: [detailMasjidId], references: [id])

  @@map("tb_photos")
}

model Category {
  id                        String              @id @default(uuid()) @db.VarChar(255)
  name                      String              @db.VarChar(255)
  created_by                String              @db.VarChar(255)
  updated_by                String              @db.VarChar(255)
  created_at                DateTime            @default(now()) @db.Timestamp(0)
  updated_at                DateTime            @default(now()) @updatedAt @db.Timestamp(0)

  createdBy                 User                @relation("CategoryCreatedBy", fields: [created_by], references: [id])
  updatedBy                 User                @relation("CategoryUpdatedBy", fields: [updated_by], references: [id])
  masjidCategories          MasjidCategory[]    @relation("CategoryMasjidCategories")

  @@map("tb_categories")
}

model MasjidCategory {
  id                        Int                 @id @default(autoincrement()) @db.Int
  masjidId                  String              @db.VarChar(255)
  id_category               String              @db.VarChar(255)

  masjid                    Masjid              @relation("MasjidCategories", fields: [masjidId], references: [id])
  category                  Category            @relation("CategoryMasjidCategories", fields: [id_category], references: [id])

  @@map("tb_masjid_category")
}

model History {
  id                        Int                 @id @default(autoincrement())
  action                    String              @db.VarChar(255)
  timestamp                 DateTime            @default(now())
  masjidId                  String?             @db.VarChar(255)
  detailMasjidId            String?             @db.VarChar(255)
  userId                    String              @db.VarChar(255)

  
  detailMasjid              DetailMasjid?       @relation("DetailMasjidHistories", fields: [detailMasjidId], references: [id])
  user                      User                @relation("HistoryUser", fields: [userId], references: [id])

  @@map("tb_histories")
}
